// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/url/compis/proyectofas1/flex/lexico.flex

package gt.url.compis.proyectofas1;
import static gt.url.compis.proyectofas1.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\0\1\6\1\0\1\7\3\0\1\10\1\11\1\12"+
    "\2\0\1\13\1\0\1\14\1\15\11\16\1\0\1\17"+
    "\5\0\1\20\16\21\1\22\12\21\4\23\1\21\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\21\1\31\1\32"+
    "\1\33\2\21\1\34\1\35\1\36\1\37\1\40\1\21"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\21"+
    "\1\50\12\0\1\51\34\0\4\7\4\0\1\7\12\0"+
    "\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0"+
    "\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0"+
    "\1\7\201\0\5\7\1\0\2\7\2\0\4\7\1\0"+
    "\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0"+
    "\24\7\1\0\123\7\1\0\213\7\10\0\246\7\1\0"+
    "\46\7\2\0\1\7\7\0\47\7\7\0\1\7\100\0"+
    "\33\7\5\0\3\7\30\0\1\7\24\0\53\7\43\0"+
    "\2\7\1\0\143\7\1\0\1\7\17\0\2\7\7\0"+
    "\2\7\12\0\3\7\2\0\1\7\20\0\1\7\1\0"+
    "\36\7\35\0\131\7\13\0\1\7\30\0\41\7\11\0"+
    "\2\7\4\0\1\7\5\0\26\7\4\0\1\7\11\0"+
    "\1\7\3\0\1\7\27\0\31\7\7\0\13\7\65\0"+
    "\25\7\1\0\10\7\106\0\66\7\3\0\1\7\22\0"+
    "\1\7\7\0\12\7\17\0\20\7\4\0\10\7\2\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0"+
    "\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0"+
    "\3\7\16\0\4\7\7\0\2\7\10\0\6\7\4\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\37\0\4\7\1\0\1\7\23\0"+
    "\3\7\20\0\11\7\1\0\3\7\1\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\5\7\3\0\1\7\22\0"+
    "\1\7\17\0\2\7\17\0\1\7\7\0\1\7\13\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\3\0\1\7\36\0\2\7\1\0"+
    "\3\7\17\0\1\7\21\0\1\7\1\0\6\7\3\0"+
    "\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\3\0\3\7\3\0\14\7\26\0"+
    "\1\7\50\0\1\7\13\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\20\7\3\0\1\7\32\0\3\7\5\0"+
    "\2\7\36\0\1\7\4\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\12\7\1\0\5\7\3\0\1\7\40\0"+
    "\1\7\1\0\2\7\17\0\2\7\22\0\10\7\1\0"+
    "\3\7\1\0\51\7\2\0\1\7\20\0\1\7\5\0"+
    "\3\7\10\0\3\7\30\0\6\7\5\0\22\7\3\0"+
    "\30\7\1\0\11\7\1\0\1\7\2\0\7\7\72\0"+
    "\60\7\1\0\2\7\13\0\10\7\72\0\2\7\1\0"+
    "\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0"+
    "\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0"+
    "\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0"+
    "\1\7\2\0\5\7\1\0\1\7\25\0\4\7\40\0"+
    "\1\7\77\0\10\7\1\0\44\7\33\0\5\7\163\0"+
    "\53\7\24\0\1\7\20\0\6\7\4\0\4\7\3\0"+
    "\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0"+
    "\1\7\21\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\53\7\1\0\115\7\1\0\4\7\2\0\7\7\1\0"+
    "\1\7\1\0\4\7\2\0\51\7\1\0\4\7\2\0"+
    "\41\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0"+
    "\103\7\45\0\20\7\20\0\126\7\2\0\6\7\3\0"+
    "\u016c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0"+
    "\13\7\7\0\15\7\1\0\4\7\16\0\22\7\16\0"+
    "\22\7\16\0\15\7\1\0\3\7\17\0\64\7\43\0"+
    "\1\7\3\0\2\7\103\0\130\7\10\0\5\7\2\0"+
    "\42\7\1\0\1\7\5\0\106\7\12\0\37\7\61\0"+
    "\36\7\2\0\5\7\13\0\54\7\4\0\32\7\66\0"+
    "\27\7\11\0\65\7\122\0\1\7\135\0\57\7\21\0"+
    "\7\7\67\0\36\7\15\0\2\7\12\0\54\7\32\0"+
    "\44\7\51\0\3\7\12\0\44\7\2\0\11\7\140\0"+
    "\4\7\1\0\4\7\3\0\2\7\11\0\300\7\100\0"+
    "\26\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0"+
    "\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0"+
    "\15\7\5\0\3\7\1\0\7\7\53\0\2\3\25\0"+
    "\2\7\23\0\1\7\34\0\1\7\15\0\1\7\20\0"+
    "\15\7\3\0\40\7\102\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0"+
    "\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0177\0"+
    "\57\7\1\0\57\7\1\0\205\7\6\0\4\7\3\0"+
    "\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\70\7\7\0\1\7\20\0\27\7\11\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\120\0\1\7\325\0"+
    "\3\7\31\0\11\7\7\0\5\7\2\0\5\7\4\0"+
    "\126\7\6\0\3\7\1\0\132\7\1\0\4\7\5\0"+
    "\52\7\2\0\136\7\21\0\33\7\65\0\306\7\112\0"+
    "\353\7\25\0\215\7\103\0\56\7\2\0\15\7\3\0"+
    "\20\7\12\0\2\7\24\0\57\7\20\0\37\7\2\0"+
    "\120\7\47\0\11\7\2\0\147\7\2\0\44\7\1\0"+
    "\10\7\77\0\13\7\1\0\3\7\1\0\4\7\1\0"+
    "\27\7\25\0\1\7\7\0\64\7\16\0\62\7\76\0"+
    "\6\7\3\0\1\7\1\0\1\7\14\0\34\7\12\0"+
    "\27\7\31\0\35\7\7\0\57\7\34\0\1\7\20\0"+
    "\5\7\1\0\12\7\12\0\5\7\1\0\51\7\27\0"+
    "\3\7\1\0\10\7\24\0\27\7\3\0\1\7\3\0"+
    "\62\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0"+
    "\1\7\1\0\1\7\30\0\3\7\2\0\13\7\7\0"+
    "\3\7\14\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\1\0\53\7\1\0\12\7\12\0"+
    "\163\7\35\0\244\7\14\0\27\7\4\0\61\7\4\0"+
    "\u0100\3\156\7\2\0\152\7\46\0\7\7\14\0\5\7"+
    "\5\0\1\7\1\0\12\7\1\0\15\7\1\0\5\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\153\7\22\0\100\7\2\0\66\7\50\0\15\7"+
    "\66\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7"+
    "\1\0\207\7\7\0\1\7\34\0\32\7\4\0\1\7"+
    "\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7"+
    "\31\0\14\7\1\0\32\7\1\0\23\7\1\0\2\7"+
    "\1\0\17\7\2\0\16\7\42\0\173\7\105\0\65\7"+
    "\u010b\0\35\7\3\0\61\7\57\0\40\7\15\0\36\7"+
    "\5\0\46\7\12\0\36\7\2\0\44\7\4\0\10\7"+
    "\1\0\5\7\52\0\236\7\22\0\44\7\4\0\44\7"+
    "\4\0\50\7\10\0\64\7\234\0\67\7\11\0\26\7"+
    "\12\0\10\7\230\0\6\7\2\0\1\7\1\0\54\7"+
    "\1\0\2\7\3\0\1\7\2\0\27\7\12\0\27\7"+
    "\11\0\37\7\101\0\23\7\1\0\2\7\12\0\26\7"+
    "\12\0\32\7\106\0\70\7\6\0\2\7\100\0\1\7"+
    "\17\0\4\7\1\0\3\7\1\0\33\7\54\0\35\7"+
    "\3\0\35\7\43\0\10\7\1\0\34\7\33\0\66\7"+
    "\12\0\26\7\12\0\23\7\15\0\22\7\156\0\111\7"+
    "\67\0\63\7\15\0\63\7\20\0\65\7\113\0\55\7"+
    "\40\0\31\7\32\0\44\7\51\0\43\7\3\0\1\7"+
    "\14\0\60\7\16\0\4\7\25\0\1\7\1\0\1\7"+
    "\43\0\22\7\1\0\31\7\124\0\7\7\1\0\1\7"+
    "\1\0\4\7\1\0\17\7\1\0\12\7\7\0\57\7"+
    "\46\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\3\0\1\7\22\0\1\7"+
    "\14\0\5\7\236\0\65\7\22\0\4\7\65\0\60\7"+
    "\24\0\2\7\1\0\1\7\270\0\57\7\51\0\4\7"+
    "\44\0\60\7\24\0\1\7\73\0\53\7\125\0\32\7"+
    "\u0186\0\100\7\37\0\2\7\12\0\50\7\7\0\1\7"+
    "\25\0\1\7\13\0\50\7\2\0\4\7\66\0\71\7"+
    "\7\0\11\7\1\0\45\7\21\0\1\7\61\0\36\7"+
    "\160\0\7\7\1\0\2\7\1\0\46\7\25\0\1\7"+
    "\271\0\232\7\146\0\157\7\21\0\304\7\274\0\57\7"+
    "\321\0\107\7\271\0\71\7\7\0\37\7\161\0\36\7"+
    "\22\0\60\7\20\0\4\7\37\0\25\7\5\0\23\7"+
    "\160\0\105\7\13\0\1\7\102\0\15\7\100\0\2\7"+
    "\36\0\355\7\23\0\363\7\15\0\37\7\121\0\u018c\7"+
    "\4\0\153\7\5\0\15\7\3\0\11\7\7\0\12\7"+
    "\u0266\0\125\7\1\0\107\7\1\0\2\7\2\0\1\7"+
    "\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7"+
    "\1\0\7\7\1\0\101\7\1\0\4\7\2\0\10\7"+
    "\1\0\7\7\1\0\34\7\1\0\4\7\1\0\5\7"+
    "\1\0\1\7\3\0\7\7\1\0\u0154\7\2\0\31\7"+
    "\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7"+
    "\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7"+
    "\1\0\31\7\1\0\10\7\u0234\0\305\7\73\0\104\7"+
    "\274\0\4\7\1\0\33\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7"+
    "\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7"+
    "\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7"+
    "\1\0\12\7\1\0\21\7\5\0\3\7\1\0\5\7"+
    "\1\0\21\7\104\0\327\7\51\0\65\7\13\0\336\7"+
    "\2\0\u0182\7\16\0\u0131\7\37\0\36\7\u02e2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\1\2\4\1\5"+
    "\15\3\1\0\1\6\1\0\1\4\1\0\1\2\1\0"+
    "\1\7\20\3\1\10\1\3\2\0\1\2\1\7\25\3"+
    "\1\0\1\2\15\3\1\10\30\3\1\0\15\3\5\0"+
    "\4\3\1\0\2\3\6\0\1\3\1\0\2\3\1\0"+
    "\2\3\5\0\1\3\1\0\1\3\14\0\1\11\37\0"+
    "\1\12\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\176\0\250\0\322\0\374"+
    "\0\u0126\0\52\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\124"+
    "\0\124\0\u0372\0\u039c\0\u03c6\0\u03f0\0\374\0\u041a\0\u0444"+
    "\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\u0738\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa"+
    "\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a"+
    "\0\u0d74\0\176\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70"+
    "\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0"+
    "\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110"+
    "\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260"+
    "\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0"+
    "\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500"+
    "\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650"+
    "\0\u167a\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0"+
    "\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0"+
    "\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40"+
    "\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\52\0\u1b3c\0\u1b66"+
    "\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6"+
    "\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06"+
    "\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56"+
    "\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028\0\52\0\u2052\0\u207c"+
    "\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc"+
    "\0\u21f6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\0\1\3\1\4\1\5\3\2\1\6"+
    "\1\7\1\10\1\11\1\12\2\5\1\13\1\2\1\5"+
    "\1\14\1\15\1\16\1\17\1\5\1\20\1\21\1\22"+
    "\1\23\2\5\1\24\1\25\1\26\3\5\1\27\2\5"+
    "\53\0\2\30\3\0\1\30\1\31\43\30\7\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\25\5"+
    "\17\0\1\33\45\0\1\34\1\0\1\35\52\0\2\36"+
    "\1\0\31\37\16\0\2\11\1\0\31\37\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\15\5"+
    "\1\40\7\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\13\5\1\41\11\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\10\5"+
    "\1\42\2\5\1\43\11\5\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\4\5\1\44\20\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\12\5\1\45\3\5\1\46\4\5\1\47\1\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\1\50\24\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\12\5\1\51\12\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\4\5\1\52\20\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\4\5\1\53\2\5\1\54"+
    "\15\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\15\5\1\55\2\5\1\56\4\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\4\5\1\57\20\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\7\5\1\60\15\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\6\5\1\61\16\5\17\0\1\5\50\0\2\33\33\0"+
    "\12\62\1\63\37\62\2\35\1\3\1\35\1\64\45\35"+
    "\15\0\2\65\1\0\31\37\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\7\5\1\66\15\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\10\5\1\67\14\5\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\1\70\24\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\12\5\1\71\12\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\2\5\1\72\13\5\1\73"+
    "\2\5\1\74\3\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\17\5\1\75\5\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\2\5\1\76\22\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\17\5\1\77\5\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\2\5\1\52\22\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\2\5\1\100\13\5\1\101"+
    "\6\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\4\5\1\102\20\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\17\5\1\103"+
    "\5\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\4\5\1\104\20\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\7\5\1\105"+
    "\3\5\1\106\11\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\1\5\1\107\23\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\1\110\24\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\12\5\1\111\12\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\7\5"+
    "\1\112\15\5\1\0\12\62\1\113\51\62\1\113\1\62"+
    "\1\114\35\62\2\0\1\3\64\0\2\65\42\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\12\5"+
    "\1\115\12\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\4\5\1\116\20\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\16\5"+
    "\1\117\6\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\16\5\1\120\6\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\15\5"+
    "\1\121\7\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\3\5\1\117\13\5\1\122\5\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\13\5\1\123\11\5\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\4\5\1\124\6\5"+
    "\1\125\11\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\15\5\1\126\7\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\7\5"+
    "\1\127\15\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\10\5\1\130\4\5\1\121\7\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\17\5\1\131\5\5\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\15\5\1\132\7\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\13\5\1\133\11\5\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\12\5\1\134\12\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\21\5\1\135\3\5\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\14\5\1\136\2\5"+
    "\1\137\5\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\10\5\1\140\14\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\10\5"+
    "\1\141\14\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\13\5\1\132\11\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\10\5"+
    "\1\117\14\5\1\0\12\62\1\113\1\62\1\3\35\62"+
    "\7\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\2\5\1\142\22\5\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\1\143\24\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\4\5\1\132\20\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\17\5\1\122\5\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\4\5\1\144\20\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\15\5\1\145\7\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\10\5\1\146\14\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\15\5\1\147\7\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\12\5\1\150\12\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\7\5\1\151\15\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\4\5\1\152\20\5\10\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\20\5\1\153\4\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\1\154\24\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\3\5\1\155\21\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\17\5"+
    "\1\156\5\5\10\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\1\157\24\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\7\5\1\160"+
    "\15\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\4\5\1\161\20\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\7\5\1\162"+
    "\15\5\6\0\1\163\1\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\25\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\7\5\1\164"+
    "\15\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\12\5\1\165\12\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\11\5\1\166"+
    "\13\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\20\5\1\167\4\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\21\5\1\52"+
    "\3\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\13\5\1\170\11\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\2\5\1\171"+
    "\22\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\1\5\1\153\23\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\12\5\1\172"+
    "\12\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\7\5\1\102\15\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\12\5\1\173"+
    "\12\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\13\5\1\174\11\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\15\5\1\175"+
    "\7\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\3\5\1\176\21\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\4\5\1\177"+
    "\20\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\5\5\1\200\17\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\2\5\1\176"+
    "\22\5\27\0\1\201\5\0\1\202\4\0\1\203\1\204"+
    "\1\205\15\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\14\5\1\206\10\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\13\5\1\207"+
    "\11\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\4\5\1\210\20\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\2\5\1\211"+
    "\22\5\6\0\1\212\1\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\25\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\4\5\1\174"+
    "\20\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\3\5\1\117\21\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\2\5\1\213"+
    "\22\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\16\5\1\132\6\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\1\174\24\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\1\174\12\5\1\174\11\5\10\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\3\5\1\214"+
    "\21\5\10\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\7\5\1\157\15\5\25\0\1\215\12\0"+
    "\1\216\51\0\1\217\36\0\1\220\55\0\1\221\45\0"+
    "\1\222\34\0\1\5\3\0\1\32\1\0\2\5\1\0"+
    "\3\5\1\0\1\223\24\5\6\0\1\224\1\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\25\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\12\5\1\225\12\5\10\0\1\5\3\0\1\32"+
    "\1\0\2\5\1\0\3\5\1\0\17\5\1\226\5\5"+
    "\27\0\1\227\32\0\1\5\3\0\1\32\1\0\2\5"+
    "\1\0\3\5\1\0\7\5\1\230\15\5\10\0\1\5"+
    "\3\0\1\32\1\0\2\5\1\0\3\5\1\0\1\231"+
    "\24\5\30\0\1\232\64\0\1\204\40\0\1\233\53\0"+
    "\1\234\54\0\1\235\51\0\1\236\22\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\10\5\1\237"+
    "\14\5\27\0\1\240\32\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\17\5\1\230\5\5\10\0"+
    "\1\5\3\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\13\5\1\241\11\5\25\0\1\242\34\0\1\5\3\0"+
    "\1\32\1\0\2\5\1\0\3\5\1\0\1\102\24\5"+
    "\10\0\1\5\3\0\1\32\1\0\2\5\1\0\3\5"+
    "\1\0\3\5\1\171\21\5\31\0\1\243\45\0\1\244"+
    "\75\0\1\245\40\0\1\245\43\0\1\246\27\0\1\5"+
    "\1\247\2\0\1\32\1\0\2\5\1\0\3\5\1\0"+
    "\25\5\25\0\1\250\34\0\1\5\3\0\1\32\1\0"+
    "\2\5\1\0\3\5\1\0\15\5\1\237\7\5\30\0"+
    "\1\251\60\0\1\252\54\0\1\253\20\0\1\254\71\0"+
    "\1\255\32\0\1\256\67\0\1\257\52\0\1\260\45\0"+
    "\1\261\60\0\1\262\57\0\1\263\46\0\1\264\43\0"+
    "\1\265\57\0\1\266\33\0\1\267\74\0\1\270\36\0"+
    "\1\271\64\0\1\272\44\0\1\273\37\0\1\274\66\0"+
    "\1\275\45\0\1\235\40\0\1\276\55\0\1\245\45\0"+
    "\1\277\45\0\1\300\61\0\1\301\55\0\1\302\35\0"+
    "\1\303\61\0\1\304\45\0\1\305\26\0\1\306\3\0"+
    "\1\306\71\0\1\307\62\0\1\310\47\0\1\311\24\0"+
    "\1\312\10\0\3\312\1\0\25\312\40\0\1\313\55\0"+
    "\1\314\16\0\1\315\50\0\1\312\1\0\1\316\1\0"+
    "\1\317\1\0\2\312\1\0\3\312\1\0\25\312\35\0"+
    "\1\320\45\0\1\321\47\0\1\322\41\0\1\312\63\0"+
    "\1\323\62\0\1\324\34\0\1\325\51\0\1\326\64\0"+
    "\1\311\41\0\1\327\60\0\1\324\43\0\1\330\57\0"+
    "\1\331\37\0\1\302\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8736];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\1\11\15\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\23\1\2\0\27\1\1\0"+
    "\47\1\1\0\15\1\5\0\4\1\1\0\2\1\6\0"+
    "\1\1\1\0\2\1\1\0\2\1\5\0\1\1\1\0"+
    "\1\1\14\0\1\11\37\0\1\11\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 11: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 12: break;
          case 3:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 13: break;
          case 4:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 14: break;
          case 5:
            { lexeme=yytext(); return Final_Linea;
            }
            // fall through
          case 15: break;
          case 6:
            { lexeme=yytext(); return Palabra;
            }
            // fall through
          case 16: break;
          case 7:
            { lexeme=yytext() + " Linea: " + yyline; return No_Ides;
            }
            // fall through
          case 17: break;
          case 8:
            { lexeme=yytext(); return Reservadas;
            }
            // fall through
          case 18: break;
          case 9:
            { lexeme=yytext(); return Metodo_Reservado;
            }
            // fall through
          case 19: break;
          case 10:
            { lexeme=yytext(); return Funcion_Especial;
            }
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
